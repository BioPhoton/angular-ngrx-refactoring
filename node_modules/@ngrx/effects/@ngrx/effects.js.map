{"version":3,"file":"effects.js","sources":["../../../modules/effects/index.ts","../../../modules/effects/src/util.ts","../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/effects_feature_module.ts","../../../modules/effects/src/effects_root_module.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/error_reporter.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/effect_notification.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_metadata.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Effect,mergeEffects,Actions,EffectsModule,EffectSources,OnRunEffects,toPayload,EffectNotification} from './public_api';\n\nexport {EffectsFeatureModule as ɵc} from './src/effects_feature_module';\nexport {createSourceInstances as ɵa,getConsole as ɵb} from './src/effects_module';\nexport {EffectsRootModule as ɵg} from './src/effects_root_module';\nexport {EffectsRunner as ɵi} from './src/effects_runner';\nexport {ErrorReporter as ɵh} from './src/error_reporter';\nexport {CONSOLE as ɵf,FEATURE_EFFECTS as ɵe,ROOT_EFFECTS as ɵd} from './src/tokens';","import { Action } from '@ngrx/store';\n/**\n * @deprecated Since version 4.1. Will be deleted in version 5.0.\n * @param {?} action\n * @return {?}\n */\nexport function toPayload(action: Action): any {\n  return ( /** @type {?} */((action as any))).payload;\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, CONSOLE } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectsModule {\n/**\n * @param {?} featureEffects\n * @return {?}\n */\nstatic forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n/**\n * @param {?} rootEffects\n * @return {?}\n */\nstatic forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        ErrorReporter,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n        {\n          provide: CONSOLE,\n          useFactory: getConsole,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EffectsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsModule.ctorParameters;\n}\n\n/**\n * @param {...?} instances\n * @return {?}\n */\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n/**\n * @return {?}\n */\nexport function getConsole() {\n  return console;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\nexport class EffectsFeatureModule {\n/**\n * @param {?} root\n * @param {?} effectSourceGroups\n * @param {?} storeModule\n */\nconstructor(\nprivate root: EffectsRootModule,\n     effectSourceGroups: any[][],\n     storeModule: StoreModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectsRootModule, },\n{type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS, ] }, ]},\n{type: StoreModule, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction EffectsFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsFeatureModule.ctorParameters;\n/** @type {?} */\nEffectsFeatureModule.prototype.root;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\nexport class EffectsRootModule {\n/**\n * @param {?} sources\n * @param {?} runner\n * @param {?} rootEffects\n * @param {?} storeModule\n */\nconstructor(\nprivate sources: EffectSources,\n    runner: EffectsRunner,\n     rootEffects: any[],\n     storeModule: StoreModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: EffectsRunner, },\n{type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS, ] }, ]},\n{type: StoreModule, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction EffectsRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRootModule.ctorParameters;\n/** @type {?} */\nEffectsRootModule.prototype.sources;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\nexport class EffectsRunner implements OnDestroy {\nprivate effectsSubscription: Subscription | null = null;\n/**\n * @param {?} effectSources\n * @param {?} store\n */\nconstructor(\nprivate effectSources: EffectSources,\nprivate store: Store<any>\n  ) {}\n/**\n * @return {?}\n */\nstart() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: Store, },\n];\n}\n\nfunction EffectsRunner_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRunner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRunner.ctorParameters;\n/** @type {?} */\nEffectsRunner.prototype.effectsSubscription;\n/** @type {?} */\nEffectsRunner.prototype.effectSources;\n/** @type {?} */\nEffectsRunner.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { filter } from 'rxjs/operator/filter';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Notification } from 'rxjs/Notification';\nimport { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification, verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectSources extends Subject<any> {\n/**\n * @param {?} errorReporter\n */\nconstructor(private errorReporter: ErrorReporter) {\n    super();\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n/**\n * @return {?}\n */\ntoActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          filter.call(\n            map.call(\n              exhaustMap.call(source$, resolveEffectSource),\n              (output: EffectNotification) => {\n                verifyOutput(output, this.errorReporter);\n\n                return output.notification;\n              }\n            ),\n            (notification: Notification<any>) => notification.kind === 'N'\n          )\n        )\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ErrorReporter, },\n];\n}\n\nfunction EffectSources_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectSources.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectSources.ctorParameters;\n/** @type {?} */\nEffectSources.prototype.errorReporter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { CONSOLE } from './tokens';\nexport class ErrorReporter {\n/**\n * @param {?} console\n */\nconstructor(\nprivate console: any) {}\n/**\n * @param {?} reason\n * @param {?} details\n * @return {?}\n */\nreport(reason: string, details: any): void {\n    this.console.group(reason);\n\n    for (let /** @type {?} */ key in details) {\n      this.console.error(`${key}:`, details[key]);\n    }\n\n    this.console.groupEnd();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONSOLE, ] }, ]},\n];\n}\n\nfunction ErrorReporter_tsickle_Closure_declarations() {\n/** @type {?} */\nErrorReporter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nErrorReporter.ctorParameters;\n/** @type {?} */\nErrorReporter.prototype.console;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const /** @type {?} */ IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const /** @type {?} */ ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const /** @type {?} */ FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\nexport const /** @type {?} */ CONSOLE = new InjectionToken<Console>('Browser Console');\n","import { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { ErrorReporter } from './error_reporter';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportErrorThrown(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'E') {\n    const /** @type {?} */ errorReason = `Effect ${getEffectName(output)} threw an error`;\n\n    reporter.report(errorReason, {\n      Source: output.sourceInstance,\n      Effect: output.effect,\n      Error: output.notification.error,\n      Notification: output.notification,\n    });\n  }\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'N') {\n    const /** @type {?} */ action = output.notification.value;\n    const /** @type {?} */ isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      const /** @type {?} */ errorReason = `Effect ${getEffectName(\n        output\n      )} dispatched an invalid action`;\n\n      reporter.report(errorReason, {\n        Source: output.sourceInstance,\n        Effect: output.effect,\n        Dispatched: action,\n        Notification: output.notification,\n      });\n    }\n  }\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const /** @type {?} */ isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\nexport class Actions<V = Action> extends Observable<V> {\n/**\n * @param {?=} source\n */\nconstructor( source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<V, R>): Observable<R> {\n    const /** @type {?} */ observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n/**\n * @template V2\n * @param {...?} allowedTypes\n * @return {?}\n */\nofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return filter.call(this, (action: Action) =>\n      allowedTypes.some(type => type === action.type)\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject, ] }, ]},\n];\n}\n\nfunction Actions_tsickle_Closure_declarations() {\n/** @type {?} */\nActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const /** @type {?} */ sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const /** @type {?} */ observables: Observable<any>[] = getSourceMetadata(\n    sourceInstance\n  ).map(({ propertyName, dispatch }): Observable<EffectNotification> => {\n    const /** @type {?} */ observable: Observable<any> =\n      typeof sourceInstance[propertyName] === 'function'\n        ? sourceInstance[propertyName]()\n        : sourceInstance[propertyName];\n\n    if (dispatch === false) {\n      return ignoreElements.call(observable);\n    }\n\n    const /** @type {?} */ materialized$ = materialize.call(observable);\n\n    return map.call(\n      materialized$,\n      (notification: Notification<Action>): EffectNotification => ({\n        effect: sourceInstance[propertyName],\n        notification,\n        propertyName,\n        sourceName,\n        sourceInstance,\n      })\n    );\n  });\n\n  return merge(...observables);\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function resolveEffectSource(sourceInstance: any) {\n  const /** @type {?} */ mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effect_notification';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>\n  ): Observable<EffectNotification>;\n}\n\nconst /** @type {?} */ onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function isOnRunEffects(\n  sourceInstance: Object\n): sourceInstance is OnRunEffects {\n  const /** @type {?} */ source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst /** @type {?} */ METADATA_KEY = '@ngrx/effects';\nconst /** @type {?} */ r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n/**\n * @param {?} sourceType\n * @return {?}\n */\nfunction hasStaticMetadata(sourceType: any): boolean {\n  return !!( /** @type {?} */((sourceType as any))).propDecorators;\n}\n/**\n * @param {?} sourceType\n * @return {?}\n */\nfunction getStaticMetadata(sourceType: any): EffectMetadata[] {\n  const /** @type {?} */ propDecorators = sourceType.propDecorators;\n  return Object.keys(propDecorators).reduce(\n    (all, key) => all.concat(getStaticMetadataEntry(propDecorators[key], key)),\n    []\n  );\n}\n/**\n * @param {?} metadataEntry\n * @param {?} propertyName\n * @return {?}\n */\nfunction getStaticMetadataEntry(metadataEntry: any, propertyName: string) {\n  return metadataEntry\n    .filter((entry: any) => entry.type === Effect)\n    .map((entry: any) => {\n      let /** @type {?} */ dispatch = true;\n      if (entry.args && entry.args.length) {\n        dispatch = !!entry.args[0].dispatch;\n      }\n      return { propertyName, dispatch };\n    });\n}\n/**\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  if (hasStaticMetadata(sourceProto.constructor)) {\n    return getStaticMetadata(sourceProto.constructor);\n  }\n\n  if (r.hasOwnMetadata(METADATA_KEY, sourceProto)) {\n    return r.getOwnMetadata(METADATA_KEY, sourceProto);\n  }\n\n  return [];\n}\n/**\n * @param {?} sourceProto\n * @param {?} entries\n * @return {?}\n */\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  r.defineMetadata(METADATA_KEY, entries, sourceProto);\n}\n/**\n * \\@Annotation\n * @param {?=} __0\n * @return {?}\n */\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const /** @type {?} */ effects: EffectMetadata[] = getEffectMetadataEntries(target);\n    const /** @type {?} */ metadata: EffectMetadata = { propertyName, dispatch };\n\n    setEffectMetadataEntries(target, [...effects, metadata]);\n  };\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const /** @type {?} */ getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;AaKA,MAAM,YAAA,GAAe,eAAA,CAAgB;AACrC,MAAM,CAAA,GAAS,OAAA,CAAQ;;;;;AAUvB,SAAA,iBAAA,CAHC,UAAA,EAGD;IACE,OAHO,CAAA,CAAE,EAAC,UAAc,GAAK,cAAC,CAAc;CAI7C;;;;;AAKD,SAAA,iBAAA,CANC,UAAA,EAMD;IACE,uBANM,cAAA,GAAiB,UAAA,CAAW,cAAC,CAAc;IAOjD,OANO,MAAA,CAAO,IAAC,CAAI,cAAC,CAAc,CAAC,MAAC,CAOlC,CAAC,GANC,EAAI,GAAA,KAAQ,GAAA,CAAI,MAAC,CAAM,sBAAC,CAAsB,cAAC,CAAc,GAAC,CAAG,EAAE,GAAA,CAAI,CAAC,EAO1E,EAAE,CACH,CANC;CAOH;;;;;;AAMD,SAAA,sBAAA,CAVC,aAAA,EAAA,YAAA,EAUD;IACE,OAVO,aAAA;SAWJ,MAVC,CAAM,CAAC,KAAO,KAAQ,KAAA,CAAM,IAAC,KAAQ,MAAA,CAAO;SAW7C,GAVC,CAAG,CAAC,KAAO,KAUjB;QACM,qBAVI,QAAA,GAAW,IAAA,CAAK;QAWpB,IAAI,KAVC,CAAK,IAAC,IAAO,KAAA,CAAM,IAAC,CAAI,MAAC,EAAO;YAWnC,QAAQ,GAVG,CAAA,CAAE,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC,QAAC,CAAQ;SAWrC;QACD,OAVO,EAAE,YAAA,EAAc,QAAA,EAAS,CAAE;KAWnC,CAVC,CAAC;CAWN;;;;;AAKD,SAAA,wBAAA,CAbC,WAAA,EAaD;IACE,IAAI,iBAbC,CAAiB,WAAC,CAAW,WAAC,CAAW,EAAE;QAc9C,OAbO,iBAAA,CAAkB,WAAC,CAAW,WAAC,CAAW,CAAC;KAcnD;IAED,IAAI,CAbC,CAAC,cAAC,CAAc,YAAC,EAAa,WAAA,CAAY,EAAE;QAc/C,OAbO,CAAA,CAAE,cAAC,CAAc,YAAC,EAAa,WAAA,CAAY,CAAC;KAcpD;IAED,OAbO,EAAA,CAAG;CAcX;;;;;;AAMD,SAAA,wBAAA,CAjBC,WAAA,EAAA,OAAA,EAiBD;IACE,CAAC,CAjBC,cAAC,CAAc,YAAC,EAAa,OAAA,EAAS,WAAA,CAAY,CAAC;CAkBtD;;;;;;AAMD,AAAA,SAAA,MAAA,CAlBC,EAAA,QAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,EAkBD;IACE,OAlBO,UAAA,MAAiB,EAAK,YAAc,EAkB7C;QACI,uBAlBM,OAAA,GAA4B,wBAAA,CAAyB,MAAC,CAAM,CAAC;QAmBnE,uBAlBM,QAAA,GAA2B,EAAE,YAAA,EAAc,QAAA,EAAS,CAAE;QAoB5D,wBAAwB,CAlBC,MAAC,EAAO,CAAA,GAAE,OAAG,EAAQ,QAAA,CAAS,CAAC,CAAC;KAmB1D,CAlBC;CAmBH;;;;;AAKD,AAAA,SAAA,oBAAA,CArBC,QAAA,EAqBD;IACE,OArBO,MAAA,CAAO,cAAC,CAAc,QAAC,CAAQ,CAAC;CAsBxC;AAED,AArBO,MAAM,iBAAA,GAAoB,OAAA,CAsB/B,wBAAwB,EACxB,oBAAoB,CACrB,CArBC;;AD9DF,MAAM,eAAA,GAAsC,kBAAA,CAAmB;;;;;AAK/D,AAAA,SAAA,cAAA,CACE,cAAsB,EADxB;IAGE,uBAHM,MAAA,GAAS,oBAAA,CAAqB,cAAC,CAAc,CAAC;IAKpD,QACE,eAAe,IAHI,MAAA,IAAU,OAAO,MAAA,CAAO,eAAC,CAAe,KAAK,UAAA,EAChE;CAIH;;ADbD;;;;AAIA,AAAA,SAAA,YAAA,CACE,cAAmB,EADrB;IAGE,uBAHM,UAAA,GAAa,oBAAA,CAAqB,cAAC,CAAc,CAAC,WAAC,CAAW,IAAC,CAAI;IAKzE,uBAHM,WAAA,GAAiC,iBAAA,CAIrC,cAAc,CACf,CAHC,GAAC,CAAG,CAAC,EAAE,YAAA,EAAc,QAAA,EAAS,KAClC;QAGI,uBAHM,UAAA,GAIJ,OAHO,cAAA,CAAe,YAAC,CAAY,KAAK,UAAA;cACpC,cAAA,CAAe,YAAC,CAAY,EAAC;cAC7B,cAAA,CAAe,YAAC,CAAY,CAAC;QAKnC,IAAI,QAHC,KAAY,KAAA,EAAO;YAItB,OAHO,cAAA,CAAe,IAAC,CAAI,UAAC,CAAU,CAAC;SAIxC;QAED,uBAHM,aAAA,GAAgB,WAAA,CAAY,IAAC,CAAI,UAAC,CAAU,CAAC;QAKnD,OAHO,GAAA,CAAI,IAAC,CAIV,aAAa,EACb,CAAC,YAHkC,MAAyB;YAI1D,MAAM,EAHE,cAAA,CAAe,YAAC,CAAY;YAIpC,YAAY;YACZ,YAAY;YACZ,UAAU;YACV,cAAc;SACf,CAHC,CAIH,CAHC;KAIH,CAHC,CAAC;IAKH,OAHO,KAAA,CAAM,GAAC,WAAG,CAAW,CAAC;CAI9B;;;;;AAKD,AAAA,SAAA,mBAAA,CANC,cAAA,EAMD;IACE,uBANM,cAAA,GAAiB,YAAA,CAAa,cAAC,CAAc,CAAC;IAQpD,IAAI,cANC,CAAc,cAAC,CAAc,EAAE;QAOlC,OANO,cAAA,CAAe,gBAAC,CAAgB,cAAC,CAAc,CAAC;KAOxD;IAED,OANO,cAAA,CAAe;CAOvB;;ADtDD,MAAA,OAEC,SAAA,UAAA,CAFD;;;;IAIA,WAAA,CADe,MAAsB,EACrC;QACI,KAAK,EAAE,CAAC;QAER,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACtB;KACF;;;;;;IAMH,IALG,CAAA,QAAA,EAKH;QACI,uBALM,UAAA,GAAa,IAAI,OAAA,EAAU,CAAG;QAMpC,UAAU,CALC,MAAC,GAAQ,IAAA,CAAK;QAMzB,UAAU,CALC,QAAC,GAAU,QAAA,CAAS;QAM/B,OALO,UAAA,CAAW;KAMnB;;;;;;IAMH,MATG,CAAA,GAAA,YAAA,EASH;QACI,OATO,MAAA,CAAO,IAAC,CAAI,IAAC,EAAK,CAAA,MAAS,KAUhC,YAAY,CATC,IAAC,CAAI,IAAC,IAAO,IAAA,KAAS,MAAA,CAAO,IAAC,CAAI,CAGnD,CAFI;KAUH;;AARI,OAAP,CAAA,UAAO,GAAoC;IAU3C,EATE,IAAA,EAAM,UAAA,EAAW;CAUlB,CATC;;;;AAED,OAAD,CAAA,cAAC,GAAA,MAAA;IAYD,EAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,qBAAqB,EAAG,EAAE,EAAG,EAAC;CACpF,CAAC,AAGF,AAQC;;AD5CD;;;;;AAKA,AAAA,SAAA,YAAA,CACE,MAA0B,EAC1B,QAAuB,EAFzB;IAIE,iBAAiB,CAJC,MAAC,EAAO,QAAA,CAAS,CAAC;IAKpC,oBAAoB,CAJC,MAAC,EAAO,QAAA,CAAS,CAAC;CAKxC;;;;;;AAMD,SAAA,iBAAA,CACE,MAA0B,EAC1B,QAAuB,EAFzB;IAIE,IAAI,MARC,CAAM,YAAC,CAAY,IAAC,KAAQ,GAAA,EAAK;QASpC,uBARM,WAAA,GAAc,CAQxB,OAAA,EARwB,aAAW,CAAa,MAAC,CAAM,CAQvD,eAAA,CARwD,CAAiB;QAUrE,QAAQ,CARC,MAAC,CAAM,WAAC,EAAY;YAS3B,MAAM,EARE,MAAA,CAAO,cAAC;YAShB,MAAM,EARE,MAAA,CAAO,MAAC;YAShB,KAAK,EARE,MAAA,CAAO,YAAC,CAAY,KAAC;YAS5B,YAAY,EARE,MAAA,CAAO,YAAC;SASvB,CARC,CAAC;KASJ;CACF;;;;;;AAMD,SAAA,oBAAA,CACE,MAA0B,EAC1B,QAAuB,EAFzB;IAIE,IAAI,MAZC,CAAM,YAAC,CAAY,IAAC,KAAQ,GAAA,EAAK;QAapC,uBAZM,MAAA,GAAS,MAAA,CAAO,YAAC,CAAY,KAAC,CAAK;QAazC,uBAZM,eAAA,GAAkB,CAAA,QAAE,CAAQ,MAAC,CAAM,CAAC;QAc1C,IAAI,eAZC,EAAgB;YAanB,uBAZM,WAAA,GAAc,CAY1B,OAAA,EAZ0B,aAAW,CAa7B,MAAM,CACP,CAFP,6BAAA,CAVQ,CAA+B;YAcjC,QAAQ,CAZC,MAAC,CAAM,WAAC,EAAY;gBAa3B,MAAM,EAZE,MAAA,CAAO,cAAC;gBAahB,MAAM,EAZE,MAAA,CAAO,MAAC;gBAahB,UAAU,EAZE,MAAA;gBAaZ,YAAY,EAZE,MAAA,CAAO,YAAC;aAavB,CAZC,CAAC;SAaJ;KACF;CACF;;;;;AAKD,SAAA,QAAA,CAfC,MAAA,EAeD;IACE,OAfO,MAAA,IAAU,MAAA,CAAO,IAAC,IAAO,OAAO,MAAA,CAAO,IAAC,KAAQ,QAAA,CAAS;CAgBjE;;;;;AAKD,SAAA,aAAA,CAlBC,EAmBC,YAAY,EACZ,cAAc,EACd,UAAU,GACS,EAJrB;IAKE,uBAlBM,QAAA,GAAW,OAAO,cAAA,CAAe,YAAC,CAAY,KAAK,UAAA,CAAW;IAoBpE,OAlBO,CAkBT,CAAA,EAlBS,UAAK,CAkBd,CAAA,EAlBwB,YAAI,CAkB5B,EAlBwC,QAAG,GAAU,IAAA,GAAO,EAAA,CAkB5D,CAAA,CAlB+D,CAAG;CAmBjE;;ADxFM,MAAM,iBAAA,GAAoB,IAAI,cAAA,CACnC,iCAAiC,CAClC,CAAC;AACF,AAAO,MAAM,YAAA,GAAe,IAAI,cAAA,CAC9B,4BAA4B,CAC7B,CAAC;AACF,AAAO,MAAM,eAAA,GAAkB,IAAI,cAAA,CACjC,+BAA+B,CAChC,CAAC;AACF,AAAO,MAAM,OAAA,GAAU,IAAI,cAAA,CAAuB,iBAAE,CAAiB,CAAC;;ADTtE,MAAA,aAAA,CAAA;;;;IAIA,WAAA,CADuB,OAAS,EAChC;QADuB,IAAvB,CAAA,OAAuB,GAAA,OAAA,CAAS;KAAI;;;;;;IAQpC,MANG,CAAA,MAAA,EAAA,OAAA,EAMH;QACI,IAAI,CANC,OAAC,CAAO,KAAC,CAAK,MAAC,CAAM,CAAC;QAQ3B,KAAK,qBANI,GAAA,IAAO,OAAA,EAAS;YAOvB,IAAI,CANC,OAAC,CAAO,KAAC,CAAK,CAMzB,EAN0B,GAAG,CAM7B,CAAA,CANgC,EAAI,OAAA,CAAQ,GAAC,CAAG,CAAC,CAAC;SAO7C;QAED,IAAI,CANC,OAAC,CAAO,QAAC,EAAQ,CAAE;KAOzB;;AALI,aAAP,CAAA,UAAO,GAAoC;IAO3C,EANE,IAAA,EAAM,UAAA,EAAW;CAOlB,CANC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA;IASD,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAG,EAAC;CACrE,CAAC,AAGF,AAUC;;AD3BD,MAAA,aAEC,SAAA,OAAA,CAFD;;;;IAIA,WAAA,CADsB,aAAe,EACrC;QACI,KAAK,EAAE,CAAC;QAFU,IAAtB,CAAA,aAAsB,GAAA,aAAA,CAAe;KAGlC;;;;;IAKH,UAJG,CAAA,oBAAA,EAIH;QACI,IAAI,CAJC,IAAC,CAAI,oBAAC,CAAoB,CAAC;KAKjC;;;;IAIH,SAHG,GAGH;QACI,OAHO,QAAA,CAAS,IAAC,CAIf,OAAO,CAHC,IAAC,CAAI,IAAC,EAAK,oBAAA,CAAqB,EAIxC,CAAC,OAHoC,KAInC,aAAa,CAHC,IAAC,CAIb,MAAM,CAHC,IAAC,CAIN,GAAG,CAHC,IAAC,CAIH,UAAU,CAHC,IAAC,CAAI,OAAC,EAAQ,mBAAA,CAAoB,EAI7C,CAAC,MAHQ,KAJvB;YAQgB,YAAY,CAHC,MAAC,EAAO,IAAA,CAAK,aAAC,CAAa,CAAC;YAKzC,OAHO,MAAA,CAAO,YAAC,CAAY;SAI5B,CACF,EACD,CAAC,YAH+B,KAAK,YAAA,CAAa,IAAC,KAAQ,GAAA,CAI5D,CACF,CACJ,CAHC;KAIH;;AAFI,aAAP,CAAA,UAAO,GAAoC;IAI3C,EAHE,IAAA,EAAM,UAAA,EAAW;CAIlB,CAHC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA;IAMD,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,CAAC,AAGF,AAUC;;ADrED,MAAA,aAAA,CAAA;;;;;IAMA,WAAA,CAAY,aAAe,EACf,KAAiB,EAD7B;QAAY,IAAZ,CAAA,aAAY,GAAA,aAAA,CAAe;QACf,IAAZ,CAAA,KAAY,GAAA,KAAA,CAAiB;QAJnB,IAAV,CAAA,mBAAU,GAA2C,IAAA,CAAK;KAMpD;;;;IAIN,KAHG,GAGH;QACI,IAAI,CAHC,IAAC,CAAI,mBAAC,EAAoB;YAI7B,IAAI,CAHC,mBAAC,GAAqB,IAAA,CAAK,aAAC;iBAI9B,SAHC,EAAS;iBAIV,SAHC,CAAS,IAAC,CAAI,KAAC,CAAK,CAAC;SAI1B;KACF;;;;IAIH,WALG,GAKH;QACI,IAAI,IALC,CAAI,mBAAC,EAAoB;YAM5B,IAAI,CALC,mBAAC,CAAmB,WAAC,EAAW,CAAE;YAMvC,IAAI,CALC,mBAAC,GAAqB,IAAA,CAAK;SAMjC;KACF;;AAJI,aAAP,CAAA,UAAO,GAAoC;IAM3C,EALE,IAAA,EAAM,UAAA,EAAW;CAMlB,CALC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA;IAQD,EAAC,IAAI,EAAE,aAAa,GAAG;IACvB,EAAC,IAAI,EAAE,KAAK,GAAG;CACd,CAAC,AAGF,AAcC;;ADtDD,MAAA,iBAAA,CAAA;;;;;;;IAOA,WAAA,CAHY,OAAS,EAKjB,MAJQ,EAKP,WAJiB,EAKjB,WAJa,EAAlB;QAHY,IAAZ,CAAA,OAAY,GAAA,OAAA,CAAS;QASjB,MAAM,CAAC,KAAK,EAAE,CAAC;QAEf,WAAW,CAAC,OAAO,CAAC,oBAAoB,IACtC,OAAO,CAAC,UAAU,CAAC,oBAAoB,CAAC,CACzC,CAAC;KACH;;;;;IAKH,UAPG,CAAA,oBAAA,EAOH;QACI,IAAI,CAPC,OAAC,CAAO,UAAC,CAAU,oBAAC,CAAoB,CAAC;KAQ/C;;AANI,iBAAP,CAAA,UAAO,GAAoC;IAQ3C,EAPE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA,EAAE,EAAE,EAAG;CAQ9B,CAPC;;;;AAED,iBAAD,CAAA,cAAC,GAAA,MAAA;IAUD,EAAC,IAAI,EAAE,aAAa,GAAG;IACvB,EAAC,IAAI,EAAE,aAAa,GAAG;IACvB,EAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAG,EAAC;IACvE,EAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;CACtD,CAAC,AAGF,AAUC;;ADnDD,MAAA,oBAAA,CAAA;;;;;;IAMA,WAAA,CAFY,IAAM,EAIb,kBAH0B,EAI1B,WAHa,EAAlB;QAFY,IAAZ,CAAA,IAAY,GAAA,IAAA,CAAM;QAOd,kBAAkB,CAAC,OAAO,CAAC,KAAK,IAC9B,KAAK,CAAC,OAAO,CAAC,oBAAoB,IAChC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CACtC,CACF,CAAC;KACH;;AAFI,oBAAP,CAAA,UAAO,GAAoC;IAI3C,EAHE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA,EAAE,EAAE,EAAG;CAI9B,CAHC;;;;AAED,oBAAD,CAAA,cAAC,GAAA,MAAA;IAMD,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;IAC1E,EAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;CACtD,CAAC,AAGF,AAUC;;ADpCD,MAAA,aAAA,CAAA;;;;;IAKA,OAFG,UAAA,CAAA,cAAA,EAEH;QACI,OAFO;YAGL,QAAQ,EAFE,oBAAA;YAGV,SAAS,EAFE;gBAGT,cAAc;gBACd;oBACE,OAAO,EAFE,eAAA;oBAGT,KAAK,EAFE,IAAA;oBAGP,IAAI,EAFE,cAAA;oBAGN,UAAU,EAFE,qBAAA;iBAGb;aACF;SACF,CAFC;KAGH;;;;;IAKH,OALG,OAAA,CAAA,WAAA,EAKH;QACI,OALO;YAML,QAAQ,EALE,iBAAA;YAMV,SAAS,EALE;gBAMT,aAAa;gBACb,aAAa;gBACb,aAAa;gBACb,OAAO;gBACP,WAAW;gBACX;oBACE,OAAO,EALE,YAAA;oBAMT,IAAI,EALE,WAAA;oBAMN,UAAU,EALE,qBAAA;iBAMb;gBACD;oBACE,OAAO,EALE,OAAA;oBAMT,UAAU,EALE,UAAA;iBAMb;aACF;SACF,CALC;KAMH;;AAJI,aAAP,CAAA,UAAO,GAAoC;IAM3C,EALE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA,EAAE,EAAE,EAAG;CAM9B,CALC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA,EAQA,CAAC;AAGF,AAUA;;;;AAIA,AAAA,SAAA,qBAAA,CArBC,GAAA,SAAA,EAqBD;IACE,OA3BO,SAAA,CAAU;CA4BlB;;;;AAID,AAAA,SAAA,UAAA,GAAA;IACE,OA7BO,OAAA,CAAQ;CA8BhB;;ADnFD;;;;;AAKA,AAAA,SAAA,SAAA,CADC,MAAA,EACD;IACE,OADO,EAAA,MAAW,GAAK,OAAC,CAAO;CAEhC;;ADRD;;GAEG,AAEH,AAEA,AACA,AACA,AACA,AACA,AACA,AAA+D;;"}