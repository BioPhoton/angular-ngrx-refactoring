{"version":3,"file":"router-store.umd.js","sources":["../../../modules/router-store/src/router_store_module.ts","../../../modules/router-store/index.ts","../../../modules/router-store/src/serializer.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs/observable/of';\nimport {\n  DefaultRouterStateSerializer,\n  RouterStateSerializer,\n} from './serializer';\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<T> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<T = RouterStateSnapshot> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = 'ROUTER_CANCEL';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<T, V> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport type RouterCancelAction<T, V = RouterStateSnapshot> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = 'ROUTE_ERROR';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<T, V> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<T, V = RouterStateSnapshot> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T, V = RouterStateSnapshot> =\n  | RouterNavigationAction<T>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>;\n\nexport type RouterReducerState<T = RouterStateSnapshot> = {\n  state: T;\n  navigationId: number;\n};\n/**\n * @template T\n * @param {?} state\n * @param {?} action\n * @return {?}\n */\nexport function routerReducer<T = RouterStateSnapshot>(\n  state: RouterReducerState<T>,\n  action: RouterAction<any>\n): RouterReducerState<T> {\n  switch (action.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    default:\n      return state;\n  }\n}\n/**\n * Connects RouterModule with StoreModule.\n * \n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n * \n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n * \n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n * \n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n * \n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n * \n * Usage:\n * \n * ```typescript\n * \\@NgModule({ \n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nexport class StoreRouterConnectingModule {\nprivate routerState: RouterStateSnapshot;\nprivate storeState: any;\nprivate lastRoutesRecognized: RoutesRecognized;\nprivate dispatchTriggeredByRouter: boolean = false;\nprivate navigationTriggeredByDispatch: boolean = false;\n/**\n * @param {?} store\n * @param {?} router\n * @param {?} serializer\n */\nconstructor(\nprivate store: Store<any>,\nprivate router: Router,\nprivate serializer: RouterStateSerializer<RouterStateSnapshot>\n  ) {\n    this.setUpBeforePreactivationHook();\n    this.setUpStoreStateListener();\n    this.setUpStateRollbackEvents();\n  }\n/**\n * @return {?}\n */\nprivate setUpBeforePreactivationHook(): void {\n    ( /** @type {?} */((<any>this.router))).hooks.beforePreactivation = (\n      routerState: RouterStateSnapshot\n    ) => {\n      this.routerState = this.serializer.serialize(routerState);\n      if (this.shouldDispatchRouterNavigation())\n        this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n/**\n * @return {?}\n */\nprivate setUpStoreStateListener(): void {\n    this.store.subscribe(s => {\n      this.storeState = s;\n      this.navigateIfNeeded();\n    });\n  }\n/**\n * @return {?}\n */\nprivate shouldDispatchRouterNavigation(): boolean {\n    if (!this.storeState['routerReducer']) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n/**\n * @return {?}\n */\nprivate navigateIfNeeded(): void {\n    if (\n      !this.storeState['routerReducer'] ||\n      !this.storeState['routerReducer'].state\n    ) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.storeState['routerReducer'].state.url) {\n      this.navigationTriggeredByDispatch = true;\n      this.router.navigateByUrl(this.storeState['routerReducer'].state.url);\n    }\n  }\n/**\n * @return {?}\n */\nprivate setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate dispatchRouterNavigation(): void {\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: this.routerState,\n      event: new RoutesRecognized(\n        this.lastRoutesRecognized.id,\n        this.lastRoutesRecognized.url,\n        this.lastRoutesRecognized.urlAfterRedirects,\n        this.routerState\n      ),\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n/**\n * @param {?} type\n * @param {?} payload\n * @return {?}\n */\nprivate dispatchRouterAction(type: string, payload: any): void {\n    this.dispatchTriggeredByRouter = true;\n    try {\n      this.store.dispatch({ type, payload });\n    } finally {\n      this.dispatchTriggeredByRouter = false;\n      this.navigationTriggeredByDispatch = false;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    { provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer },\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Store, },\n{type: Router, },\n{type: RouterStateSerializer, },\n];\n}\n\nfunction StoreRouterConnectingModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRouterConnectingModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRouterConnectingModule.ctorParameters;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.routerState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.storeState;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.lastRoutesRecognized;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.dispatchTriggeredByRouter;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.navigationTriggeredByDispatch;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.store;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.router;\n/** @type {?} */\nStoreRouterConnectingModule.prototype.serializer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ROUTER_ERROR,ROUTER_CANCEL,ROUTER_NAVIGATION,RouterNavigationAction,RouterCancelAction,RouterErrorAction,RouterAction,routerReducer,RouterErrorPayload,RouterReducerState,RouterCancelPayload,RouterNavigationPayload,StoreRouterConnectingModule,RouterStateSerializer,DefaultRouterStateSerializer} from './public_api';\n","import { InjectionToken } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\n/**\n * @abstract\n */\nexport abstract class RouterStateSerializer<T> {\n/**\n * @abstract\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {}\n}\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<RouterStateSnapshot> {\n/**\n * @param {?} routerState\n * @return {?}\n */\nserialize(routerState: RouterStateSnapshot) {\n    return routerState;\n  }\n}\n"],"names":["Router","Store","NgModule","RoutesRecognized","NavigationError","NavigationCancel","of"],"mappings":"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"}